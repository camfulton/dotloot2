# This filter sucks and is meant to demonstrate how things work.
# You should be able to generate a working filter from it and use it in game.
# See the readme for a full list of filter syntax as well as instructions on how to run the program.

config:
  # The name and version impact the file name of your filter
  name: example_filter
  version: 60.9
  # The league determines where pricing data comes from
  # You should change it to the name of the leauge you are in, eg. Scourge
  league: Standard

colors:
  # This syntax creates reusable variables
  # Colors are RGBA
  black: &black 0 0 0 255
  white: &white 255 255 255 255
  red: &red 244 0 0 255
  transparent: &transparent 255 255 255 0

sounds:
  # You can specify sounds, they will be copied into
  # the destination folder set in config.py
  wow: &wow wow.mp3
  castoncrit: &castoncrit cast_on_crit.mp3

styles:
  # You can configure custom reusable styles as well
  basestyle: &basestyle
    bg: *black
    fontsize: 42
    border: *transparent

  good_item: &good_item
    # You can also compound styles by folding them in w/ the <<: * syntax
    <<: *basestyle
    # You can override elements of a base style
    bg: *red
    fg: *black
    customsound: *wow
    # Things like beam and icon just use the base GGG filter syntax
    # https://www.poewiki.net/wiki/Guide:Item_filter
    beam: Pink Temp
    icon: 2 Yellow Circle

  bad_item: &bad_item
    <<: *basestyle
    bg: *black
    # You can also just specify colors in-line if you want
    fg: 42 42 69 123

  cast_on_crit_gem: &cast_on_crit_gem
    <<: *basestyle
    fg: *white
    customsound: *castoncrit
    border: *red

  failsafe: &failsafe
    <<: *basestyle
    fg: *white
    bg: *white
    beam: White
    icon: 2 White Circle
    say: oh no! add me to your filter!

# The `blocks` section is what is used to generate your item filter
blocks:
  # You must have at least one block under the blocks
  # I personally use multiple logical groupings, like currency, league items, maps, divination cards, etc.

  overrides:
    tabula:
      # This pulls in everything from the &good_item variable above
      <<: *good_item
      links: 6
      colors: WWWWWW
      rarity: Unique
    jebait:
      <<: *bad_item
      # These div cards share partials with something like "The Demon" and will make you sad.
      bases: The Wolf's Shadow, The Catalyst, The Demoness
      # You can hide or show items using the show: true/false flag - the default is true.
      show: false
    cast_on_crit:
      <<: *cast_on_crit_gem
      bases: Cast on Critical Strike
      classes: Skill Gem

  currency:
    high_end:
      <<: *good_item
      bases: Mirror of Kalandra, Mirror Shard, Exalted Orb
    goodfossils:
      <<: *good_item
      # This will look up all fossils worth more than 20c from poe.ninja and put them in your filter
      lookup: fossils 20

  recipes:
    flaskrecipe:
      <<: *basestyle
      classes: Utility Flasks, Hybrid Flasks, Life Flasks, Mana Flasks
      # This will trigger for all non-unique flasks w/ 10+ quality
      quality: ">= 10"
      rarity: "<= Rare"

  maps:
    unique:
      <<: *good_item
      icon: 0 Brown Moon
      rarity: Unique
      classes: Maps
    blighted:
      <<: *good_item
      classes: Maps
      blighted: true
    uberblighted:
      <<: *good_item
      classes: Maps
      uberblighted: true
    t16:
      <<: *good_item
      classes: Maps
      maptier: 16
    reds:
      <<: *good_item
      classes: Maps
      maptier: ">= 11"

  # All of these rules shut off by maps.
  leveling_crafts:
    lvl8_wand_craft:
      <<: *basestyle
      rarity: Normal
      bases: Ruby Ring, Sapphire Ring, Iron Ring
      say: White Ruby or Sapphire for wand craft
      ilvl: "< 16"
    lvl20_wand_craft:
      <<: *basestyle
      rarity: Rare
      bases: Ruby Ring, Sapphire Ring, Iron Ring
      say: Rare Ruby or Sapphire for wand craft
      ilvl: "<= 30"

  uniques:
    jebait:
      <<: *basestyle
      rarity: Unique
      bases: Leather Belt, Heavy Belt, Elegant Round Shield
      say: god dangit bobby
    always_good:
      <<: *good_item
      rarity: Unique
      # This will only include uniques where _every_ unique which can naturally drop on that base has a value >= 20
      lookup: exclusive uniques 20
    sometimes_good:
      <<: *basestyle
      rarity: Unique
      # This will only include uniques where _any_ unique which can naturally drop on that base as a value >= 10
      lookup: uniques 10
    all_other_uniques:
      # This block will hide every other unique, including those that cannot naturally drop
      <<: *bad_item
      # It should be noted: if you set a _custom_ sound, either via `customsound` or `say`
      # and you hide that drop, it will still make a noise. This is a limitation of the poe
      # filter system and is extremely annoying.
      show: false
      say: bad unique, hidden but will still play custom sounds -- blame GGG not me!
      rarity: Unique

  # generate bases here
  bases:
    high_tier:
      <<: *good_item
      # Item base lookups also work, but poe.ninja indexes a lot of things that cannot naturally drop - like double influenced bases
      # These are not added to your filter, and you might see some spam in the filter output warning you about them.
      lookup: bases 50
    good_bases:
      <<: *good_item
      bases: Sorcerer Boots, Hubris Circlet, Fingerless Silk Gloves, Sorcerer Gloves, Vaal Regalia, Titanium Spirit Shield, Fossilised Spirit Shield
      defencepercentile: 100
    influenced:
      <<: *basestyle
      influence: Shaper Elder Crusader Redeemer Hunter Warlord

  div:
    # You can also run lookups on things other than uniques, basically anything indexed by poe.ninja should be supported
    # if it isn't, just let me know and I'll get it in the code.
    gooddiv:
      <<: *good_item
      classes: Divination Card
      lookup: divination cards 20
    div:
      show: false
      <<: *bad_item
      classes: Divination Card

  gems:
    alt:
      # There are many more things you can filter for, for a complete list please see the readme in this repository
      <<: *good_item
      altquality: true
      quality: ">= 20"
      classes: Active Skill Gems, Support Skill Gems

  # Always a good idea to have a failsafe, filter design can be tricky
  failsafe:
    failsafe:
      <<: *failsafe
